"""
날짜 <2023/03/06 (월)>
- 문제 링크: https://www.acmicpc.net/problem/14503
- 문제 요약
    로봇 청소기가 있는 방은 N x M크기의 직사각형, 각각의 칸은 벽 또는 빈 칸
    로봇 청소기는 상,하,좌,우로 움직인다.
    가장 왼쪽위가 (0,0), 가장 오른쪽 아래가 (N-1,M-1)
    처음에 빈 칸은 전부 청소되지 않은 상태이다.

    로봇 청소기는 다음과 같이 작동한다.
    1. 현재 칸이 아직 청소되지 않은 경우, 현재 칸을 청소한다.
    2. 현재 칸의 주변 4칸 중 청소되지 않은 빈 칸이 없는 경우,
        바라보는 방향을 유지한 채로 한 칸 후진할 수 있다면 한 칸 후진하고 1번으로 돌아간다.
        바라보는 방향의 뒤쪽 칸이 벽이라 후진할 수 없다면 작동을 멈춘다.
    3. 현재 칸의 주변 4칸 중 청소되지 않은 빈 칸이 있는 경우,
        1. 반시계 방향으로 90도 회전한다.
        2. 바라보는 방향을 기준으로 앞쪽 칸이 청소되지 않은 빈 칸인 경우 한 칸 전진한다.
        3. 1번으로 돌아간다.
    로봇 청소기가 작동을 시작한 후 작동을 멈출 때까지 청소하는 칸의 개수

    첫줄에 N,M 3이상, 50이하
    둘째 줄에 처음에 로봇 청소기가 있는 칸의 좌표 (r, c)와 처음에 로봇 청소기가 바라보는 방향 d가 입력된다. 
    d가 0인 경우 북쪽, 1인 경우 동쪽, 2인 경우 남쪽, 3인 경우 서쪽
    셋째 줄부터 N개의 줄에 각 장소의 상태: 0은 청소 안된 경우, 1은 벽
    로봇 청소기가 있는 칸은 항상 빈 칸
- 상상 코딩
    위의 로봇 청소기 작동 로직을 그대로 구현하면 될 듯 합니다.
    현재 바라보는 방향을 d로 두고, 각 방향에 대해 4가지 인덱스로 구성합니다.

- 체감 난이도 (1:쉬움 ~ 5:매우 어려움)
    3.5(문제 이해가 오래걸림)

- 문제 분석

    - 알고리즘 유형 분석
        시작 행,열(r,c)에서 문제에서 주어진 조건에따라 로봇청소기가 움직이며 청소하도록 있는 그대로 만드는 문제입니다.
        구현, 시뮬레이션 유형입니다.

    - 시간복잡도 분석
        N행 M열에 대해, 이론적으론 모든 칸에서 4방향을 모두 검사해가며 로봇청소기가 움직입니다. 
        즉, 4NM의 연산횟수가 되므로, O(N*M) 이라고 볼 수 있습니다.

    - 리팩토링 방향성
        문제에서 주어진 조건을 그대로 구현했는데, 좀 더 깊게 생각해서 공통된 조건인 경우 불필요한 연산을 줄이는 방향성이 있을 것으로 보입니다.
    
"""
## 파일로 예제 입력 읽기
import sys
sys.stdin = open("input.txt",'r')
##
import sys
input = sys.stdin.readline
N,M = map(int,input().split())
r,c,d = map(int,input().split())
dirs=[(-1,0),(0,1),(1,0),(0,-1)] # 상,우,하,좌
mat=[[*map(int,input().split())] for _ in range(N)]
result=0
while 1:
    if mat[r][c]==0:
        result+=1
        mat[r][c]=-1 # 청소완료
    durty=0
    for x,y in dirs:
        nr,nc = r+x,c+y
        if 0<=nr<N and 0<=nc<M and mat[nr][nc]==0:
            durty=1
            d=(d-1)%4
            nr,nc = r+dirs[d][0],c+dirs[d][1]
            if 0<=nr<N and 0<=nc<M and mat[nr][nc]==0:
                r,c = nr,nc
                break
    if not durty:
        nr,nc = r-dirs[d][0],c-dirs[d][1]
        if 0<=nr<N and 0<=nc<M:
            if mat[nr][nc]==1:
                break
            else:
                r,c = nr,nc
print(result)

    

